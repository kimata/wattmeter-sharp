image: gitlab.green-rabbit.net:5050/kimata/local-ubuntu:250706_043ea01d

variables:
    UV_LINK_MODE: copy
    UV_CACHE_DIR: .uv-cache

default:
    before_script:
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

stages:
    - generate-tag
    - build
    - test
    - tag-latest
    - deploy
    - renovate

generate-tag:
    stage: generate-tag
    script:
        - echo "TAG=$(date +%y%m%d)_${CI_COMMIT_SHORT_SHA}" > tag.env
    artifacts:
        reports:
            dotenv: tag.env
        expire_in: 1 hour

build-image:
    stage: build

    needs:
        - generate-tag

    variables:
        BUILDER: builder
        BUILD_KIT_IMAGE: gitlab.green-rabbit.net:5050/kimata/local-buildkit:250705_7cc0d1c

    script:
        - 'echo "Building: ${CI_REGISTRY_IMAGE}:${TAG}"'

        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.green-rabbit.net/kimata/wattmeter-config.git
        - mv wattmeter-config/sharp_config.yaml config.yaml
        - mv wattmeter-config/sharp_device.yaml device.yaml
        - mv wattmeter-config/sharp_dev_id.dat data/dev_id.dat

        - |
            docker buildx create \
                --name ${BUILDER} \
                --driver-opt image=${BUILD_KIT_IMAGE} \
                --use \
                --config /etc/buildkitd.toml

        - docker buildx use ${BUILDER}
        - docker buildx inspect --bootstrap
        - >
            docker buildx build --provenance=false --progress=plain --platform linux/amd64,linux/arm64/v8
            --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:cache
            --cache-from type=registry,ref=${CI_REGISTRY_IMAGE}:latest
            --cache-to type=inline --cache-to type=registry,ref=${CI_REGISTRY_IMAGE}:cache,mode=max
            --build-arg IMAGE_BUILD_DATE=$(date --iso-8601=seconds)
            --tag ${CI_REGISTRY_IMAGE}:${TAG} --push .

test-prepare:
    stage: build

    needs: []

    script:
        - uv sync --locked --no-editable

        - |
            now=$(date +%s)
            threshold=$((60*60*24))  # 24時間

            for net in $(docker network ls --format '{{.Name}}'); do
                if [[ "$net" == "bridge" || "$net" == "host" || "$net" == "none" ]]; then
                    continue
                fi

                attached=$(docker network inspect "$net" --format '{{json .Containers}}')
                if [[ "$attached" != "{}" ]]; then
                    continue
                fi

                created=$(docker network inspect "$net" --format '{{.Created}}')
                created_fixed=$(echo "$created" | sed -E 's/\.[0-9]+//; s/ [A-Z]+$//')
                created_ts=$(date --date="$created_fixed" +%s)

                if [[ -n "$created_ts" && $((now - created_ts)) -gt $threshold ]]; then
                    echo "Removing unused network: $net (created at $created)"
                    docker network rm "$net" || true
                fi
            done

    artifacts:
        paths:
            - ${UV_CACHE_DIR}
        expire_in: 1 hour

    cache:
        - key:
              files:
                  - uv.lock
          paths:
              - ${UV_CACHE_DIR}

test-walk-through:
    stage: test

    needs:
        - test-prepare

    script:
        - uv run pytest --numprocesses=auto --junit-xml=tests/evidence/junit-report.xml tests/test_basic.py

    artifacts:
        when: always
        paths:
            - tests/evidence/**
        reports:
            junit: tests/evidence/junit-report.xml

test-docker:
    stage: test
    needs:
        - generate-tag
        - build-image

    variables:
        HEMS_SERVER_HOST: proxy.green-rabbit.net

    script:
        # クリーンアップ: 古いコンテナを停止
        - >
            for id in $(docker ps --filter "label=job=${CI_PROJECT_NAME}-${CI_JOB_NAME}" --format "{{.ID}}"); do
                started_at=$(docker inspect --format '{{.State.StartedAt}}' "$id")
                started_epoch=$(date --date="$started_at" +%s)
                now_epoch=$(date +%s)
                diff=$(( now_epoch - started_epoch ))

                if [ "$diff" -ge 600 ]; then
                    echo "Stopping container $id (running for $diff seconds)"
                    docker stop -t 10 "$id" || true
                fi
            done

        - >
            docker run --tty
            --name ${CI_JOB_NAME}-${CI_JOB_ID} --label job=${CI_PROJECT_NAME}-${CI_JOB_NAME}
            ${CI_REGISTRY_IMAGE}:${TAG}
            ./src/sharp_hems_logger.py -s ${HEMS_SERVER_HOST} -d

tag-latest:
    stage: tag-latest

    needs:
        - generate-tag
        - build-image
        - job: test-walk-through
          artifacts: false
        - job: test-docker
          artifacts: false

    script:
        - 'echo "Tagging multi-arch image ${CI_REGISTRY_IMAGE}:${TAG} as latest"'
        - docker buildx imagetools create -t ${CI_REGISTRY_IMAGE}:latest ${CI_REGISTRY_IMAGE}:${TAG}

    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

deploy:
    stage: deploy

    needs:
        - generate-tag
        - build-image
        - job: test-walk-through
          artifacts: false
        - job: test-docker
          artifacts: false

    image:
        name: gitlab.green-rabbit.net:5050/kimata/local-kubectl:250715_c88f3965

    script:
        - 'IMAGE="${CI_REGISTRY_IMAGE}:${TAG}"'
        - 'echo "Deploying image: $IMAGE"'

        - kubectl config get-contexts
        - kubectl config use-context kimata/wattmeter-sharp:pod-rollout

        - kubectl -n hems set image deployment/wattmeter-sharp-server wattmeter-sharp-server=${IMAGE}
        - kubectl -n hems set image deployment/wattmeter-sharp-client wattmeter-sharp-client=${IMAGE}

        - kubectl -n hems rollout status deployment/wattmeter-sharp-server --timeout=300s
        - kubectl -n hems rollout status deployment/wattmeter-sharp-client --timeout=300s

        - 'echo "✓ All deployments updated successfully to $TAG"'

    rules:
        # NOTE: 自動実行ではデプロイしない
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - when: on_success

renovate:
    stage: renovate
    dependencies: []
    image:
        name: gitlab.green-rabbit.net:5050/kimata/local-renovate:250715_3b8866ff

    script:
        - renovate --platform gitlab --token ${RENOVATE_TOKEN} --endpoint ${CI_SERVER_URL}/api/v4 ${CI_PROJECT_PATH}
    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: never
        - if: $CI_PIPELINE_SOURCE == "schedule"
        - changes:
              - renovate.json
